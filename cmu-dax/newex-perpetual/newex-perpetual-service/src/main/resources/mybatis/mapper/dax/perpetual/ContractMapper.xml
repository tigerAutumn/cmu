<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.newex.dax.perpetual.data.ContractRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="ContractMap" type="cc.newex.dax.perpetual.domain.Contract">
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="biz" property="biz" jdbcType="VARCHAR" />
    <result column="index_base" property="indexBase" jdbcType="VARCHAR" />
    <result column="base" property="base" jdbcType="VARCHAR" />
    <result column="quote" property="quote" jdbcType="VARCHAR" />
    <result column="direction" property="direction" jdbcType="INTEGER" />
    <result column="pair_code" property="pairCode" jdbcType="VARCHAR" />
    <result column="unit_amount" property="unitAmount" jdbcType="DECIMAL" />
    <result column="insurance_account" property="insuranceAccount" jdbcType="BIGINT" />
    <result column="min_trade_digit" property="minTradeDigit" jdbcType="INTEGER" />
    <result column="min_quote_digit" property="minQuoteDigit" jdbcType="INTEGER" />
    <result column="contract_code" property="contractCode" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="pre_liqudate_price_threshold" property="preLiqudatePriceThreshold" jdbcType="DECIMAL" />
    <result column="liquidation_date" property="liquidationDate" jdbcType="TIMESTAMP" />
    <result column="settlement_date" property="settlementDate" jdbcType="TIMESTAMP" />
    <result column="expired" property="expired" jdbcType="INTEGER" />
    <result column="env" property="env" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="broker_id" property="brokerId" jdbcType="INTEGER" />
    <result column="interest_rate" property="interestRate" jdbcType="DECIMAL" />
    <result column="market_price" property="marketPrice" jdbcType="VARCHAR" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
    <result column="market_price_digit" property="marketPriceDigit" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    contract
  </sql>
  <sql id="Base_Column_List_Without_Id">
    biz, index_base, base, quote, direction, pair_code, unit_amount, insurance_account, 
    min_trade_digit, min_quote_digit, contract_code, type, pre_liqudate_price_threshold, 
    liquidation_date, settlement_date, expired, env, status, broker_id, interest_rate, 
    market_price, created_date, modify_date, market_price_digit
  </sql>
  <sql id="Base_Column_List">
    id, 
    <include refid="Base_Column_List_Without_Id" />
  </sql>
  <sql id="Insert_Columns">
    <if test="record.biz != null">
      biz,
    </if>
    <if test="record.indexBase != null">
      index_base,
    </if>
    <if test="record.base != null">
      base,
    </if>
    <if test="record.quote != null">
      quote,
    </if>
    <if test="record.direction != null">
      direction,
    </if>
    <if test="record.pairCode != null">
      pair_code,
    </if>
    <if test="record.unitAmount != null">
      unit_amount,
    </if>
    <if test="record.insuranceAccount != null">
      insurance_account,
    </if>
    <if test="record.minTradeDigit != null">
      min_trade_digit,
    </if>
    <if test="record.minQuoteDigit != null">
      min_quote_digit,
    </if>
    <if test="record.contractCode != null">
      contract_code,
    </if>
    <if test="record.type != null">
      type,
    </if>
    <if test="record.preLiqudatePriceThreshold != null">
      pre_liqudate_price_threshold,
    </if>
    <if test="record.liquidationDate != null">
      liquidation_date,
    </if>
    <if test="record.settlementDate != null">
      settlement_date,
    </if>
    <if test="record.expired != null">
      expired,
    </if>
    <if test="record.env != null">
      env,
    </if>
    <if test="record.status != null">
      status,
    </if>
    <if test="record.brokerId != null">
      broker_id,
    </if>
    <if test="record.interestRate != null">
      interest_rate,
    </if>
    <if test="record.marketPrice != null">
      market_price,
    </if>
    <if test="record.createdDate != null">
      created_date,
    </if>
    <if test="record.modifyDate != null">
      modify_date,
    </if>
    <if test="record.marketPriceDigit != null">
      market_price_digit,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.biz != null">
      #{record.biz,jdbcType=VARCHAR},
    </if>
    <if test="record.indexBase != null">
      #{record.indexBase,jdbcType=VARCHAR},
    </if>
    <if test="record.base != null">
      #{record.base,jdbcType=VARCHAR},
    </if>
    <if test="record.quote != null">
      #{record.quote,jdbcType=VARCHAR},
    </if>
    <if test="record.direction != null">
      #{record.direction,jdbcType=INTEGER},
    </if>
    <if test="record.pairCode != null">
      #{record.pairCode,jdbcType=VARCHAR},
    </if>
    <if test="record.unitAmount != null">
      #{record.unitAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.insuranceAccount != null">
      #{record.insuranceAccount,jdbcType=BIGINT},
    </if>
    <if test="record.minTradeDigit != null">
      #{record.minTradeDigit,jdbcType=INTEGER},
    </if>
    <if test="record.minQuoteDigit != null">
      #{record.minQuoteDigit,jdbcType=INTEGER},
    </if>
    <if test="record.contractCode != null">
      #{record.contractCode,jdbcType=VARCHAR},
    </if>
    <if test="record.type != null">
      #{record.type,jdbcType=VARCHAR},
    </if>
    <if test="record.preLiqudatePriceThreshold != null">
      #{record.preLiqudatePriceThreshold,jdbcType=DECIMAL},
    </if>
    <if test="record.liquidationDate != null">
      #{record.liquidationDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.settlementDate != null">
      #{record.settlementDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.expired != null">
      #{record.expired,jdbcType=INTEGER},
    </if>
    <if test="record.env != null">
      #{record.env,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.brokerId != null">
      #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.interestRate != null">
      #{record.interestRate,jdbcType=DECIMAL},
    </if>
    <if test="record.marketPrice != null">
      #{record.marketPrice,jdbcType=VARCHAR},
    </if>
    <if test="record.createdDate != null">
      #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.marketPriceDigit != null">
      #{record.marketPriceDigit,jdbcType=INTEGER},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.biz,jdbcType=VARCHAR},
    #{record.indexBase,jdbcType=VARCHAR},
    #{record.base,jdbcType=VARCHAR},
    #{record.quote,jdbcType=VARCHAR},
    #{record.direction,jdbcType=INTEGER},
    #{record.pairCode,jdbcType=VARCHAR},
    #{record.unitAmount,jdbcType=DECIMAL},
    #{record.insuranceAccount,jdbcType=BIGINT},
    #{record.minTradeDigit,jdbcType=INTEGER},
    #{record.minQuoteDigit,jdbcType=INTEGER},
    #{record.contractCode,jdbcType=VARCHAR},
    #{record.type,jdbcType=VARCHAR},
    #{record.preLiqudatePriceThreshold,jdbcType=DECIMAL},
    #{record.liquidationDate,jdbcType=TIMESTAMP},
    #{record.settlementDate,jdbcType=TIMESTAMP},
    #{record.expired,jdbcType=INTEGER},
    #{record.env,jdbcType=INTEGER},
    #{record.status,jdbcType=INTEGER},
    #{record.brokerId,jdbcType=INTEGER},
    #{record.interestRate,jdbcType=DECIMAL},
    #{record.marketPrice,jdbcType=VARCHAR},
    #{record.createdDate,jdbcType=TIMESTAMP},
    #{record.modifyDate,jdbcType=TIMESTAMP},
    #{record.marketPriceDigit,jdbcType=INTEGER},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=BIGINT},
    <include refid="Batch_Insert_Values" />
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.biz != null">
      biz = #{record.biz,jdbcType=VARCHAR},
    </if>
    <if test="record.indexBase != null">
      index_base = #{record.indexBase,jdbcType=VARCHAR},
    </if>
    <if test="record.base != null">
      base = #{record.base,jdbcType=VARCHAR},
    </if>
    <if test="record.quote != null">
      quote = #{record.quote,jdbcType=VARCHAR},
    </if>
    <if test="record.direction != null">
      direction = #{record.direction,jdbcType=INTEGER},
    </if>
    <if test="record.pairCode != null">
      pair_code = #{record.pairCode,jdbcType=VARCHAR},
    </if>
    <if test="record.unitAmount != null">
      unit_amount = #{record.unitAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.insuranceAccount != null">
      insurance_account = #{record.insuranceAccount,jdbcType=BIGINT},
    </if>
    <if test="record.minTradeDigit != null">
      min_trade_digit = #{record.minTradeDigit,jdbcType=INTEGER},
    </if>
    <if test="record.minQuoteDigit != null">
      min_quote_digit = #{record.minQuoteDigit,jdbcType=INTEGER},
    </if>
    <if test="record.contractCode != null">
      contract_code = #{record.contractCode,jdbcType=VARCHAR},
    </if>
    <if test="record.type != null">
      type = #{record.type,jdbcType=VARCHAR},
    </if>
    <if test="record.preLiqudatePriceThreshold != null">
      pre_liqudate_price_threshold = #{record.preLiqudatePriceThreshold,jdbcType=DECIMAL},
    </if>
    <if test="record.liquidationDate != null">
      liquidation_date = #{record.liquidationDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.settlementDate != null">
      settlement_date = #{record.settlementDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.expired != null">
      expired = #{record.expired,jdbcType=INTEGER},
    </if>
    <if test="record.env != null">
      env = #{record.env,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      status = #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.brokerId != null">
      broker_id = #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.interestRate != null">
      interest_rate = #{record.interestRate,jdbcType=DECIMAL},
    </if>
    <if test="record.marketPrice != null">
      market_price = #{record.marketPrice,jdbcType=VARCHAR},
    </if>
    <if test="record.createdDate != null">
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.marketPriceDigit != null">
      market_price_digit = #{record.marketPriceDigit,jdbcType=INTEGER},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns" />
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values" />
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values" />
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey" />
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    biz = VALUES(biz), index_base = VALUES(index_base), base = VALUES(base), quote = VALUES(quote), direction = VALUES(direction), pair_code = VALUES(pair_code), unit_amount = VALUES(unit_amount), insurance_account = VALUES(insurance_account), min_trade_digit = VALUES(min_trade_digit), min_quote_digit = VALUES(min_quote_digit), contract_code = VALUES(contract_code), type = VALUES(type), pre_liqudate_price_threshold = VALUES(pre_liqudate_price_threshold), liquidation_date = VALUES(liquidation_date), settlement_date = VALUES(settlement_date), expired = VALUES(expired), env = VALUES(env), status = VALUES(status), broker_id = VALUES(broker_id), interest_rate = VALUES(interest_rate), market_price = VALUES(market_price), created_date = VALUES(created_date), modify_date = VALUES(modify_date), market_price_digit = VALUES(market_price_digit)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update 
      <include refid="Table_Name" />
      <set>
        <include refid="Update_Set_From_Bean" />
      </set>
      where id = #{record.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="ContractMap">
    select 
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByExample" resultMap="ContractMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="ContractMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="ContractMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByPager" resultMap="ContractMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>