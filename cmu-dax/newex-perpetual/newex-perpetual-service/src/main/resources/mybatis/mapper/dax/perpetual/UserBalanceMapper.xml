<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.newex.dax.perpetual.data.UserBalanceRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="UserBalanceMap" type="cc.newex.dax.perpetual.domain.UserBalance">
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="currency_code" property="currencyCode" jdbcType="VARCHAR" />
    <result column="env" property="env" jdbcType="INTEGER" />
    <result column="reward_time" property="rewardTime" jdbcType="BIGINT" />
    <result column="frozen_status" property="frozenStatus" jdbcType="INTEGER" />
    <result column="available_balance" property="availableBalance" jdbcType="DECIMAL" />
    <result column="frozen_balance" property="frozenBalance" jdbcType="DECIMAL" />
    <result column="position_size" property="positionSize" jdbcType="DECIMAL" />
    <result column="position_margin" property="positionMargin" jdbcType="DECIMAL" />
    <result column="position_fee" property="positionFee" jdbcType="DECIMAL" />
    <result column="order_margin" property="orderMargin" jdbcType="DECIMAL" />
    <result column="order_fee" property="orderFee" jdbcType="DECIMAL" />
    <result column="realized_surplus" property="realizedSurplus" jdbcType="DECIMAL" />
    <result column="broker_id" property="brokerId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    user_balance
  </sql>
  <sql id="Base_Column_List_Without_Id">
    user_id, currency_code, env, reward_time, frozen_status, available_balance, frozen_balance, 
    position_size, position_margin, position_fee, order_margin, order_fee, realized_surplus, 
    broker_id, status, created_date, modify_date
  </sql>
  <sql id="Base_Column_List">
    id, 
    <include refid="Base_Column_List_Without_Id" />
  </sql>
  <sql id="Insert_Columns">
    <if test="record.userId != null">
      user_id,
    </if>
    <if test="record.currencyCode != null">
      currency_code,
    </if>
    <if test="record.env != null">
      env,
    </if>
    <if test="record.rewardTime != null">
      reward_time,
    </if>
    <if test="record.frozenStatus != null">
      frozen_status,
    </if>
    <if test="record.availableBalance != null">
      available_balance,
    </if>
    <if test="record.frozenBalance != null">
      frozen_balance,
    </if>
    <if test="record.positionSize != null">
      position_size,
    </if>
    <if test="record.positionMargin != null">
      position_margin,
    </if>
    <if test="record.positionFee != null">
      position_fee,
    </if>
    <if test="record.orderMargin != null">
      order_margin,
    </if>
    <if test="record.orderFee != null">
      order_fee,
    </if>
    <if test="record.realizedSurplus != null">
      realized_surplus,
    </if>
    <if test="record.brokerId != null">
      broker_id,
    </if>
    <if test="record.status != null">
      status,
    </if>
    <if test="record.createdDate != null">
      created_date,
    </if>
    <if test="record.modifyDate != null">
      modify_date,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.userId != null">
      #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.currencyCode != null">
      #{record.currencyCode,jdbcType=VARCHAR},
    </if>
    <if test="record.env != null">
      #{record.env,jdbcType=INTEGER},
    </if>
    <if test="record.rewardTime != null">
      #{record.rewardTime,jdbcType=BIGINT},
    </if>
    <if test="record.frozenStatus != null">
      #{record.frozenStatus,jdbcType=INTEGER},
    </if>
    <if test="record.availableBalance != null">
      #{record.availableBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.frozenBalance != null">
      #{record.frozenBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.positionSize != null">
      #{record.positionSize,jdbcType=DECIMAL},
    </if>
    <if test="record.positionMargin != null">
      #{record.positionMargin,jdbcType=DECIMAL},
    </if>
    <if test="record.positionFee != null">
      #{record.positionFee,jdbcType=DECIMAL},
    </if>
    <if test="record.orderMargin != null">
      #{record.orderMargin,jdbcType=DECIMAL},
    </if>
    <if test="record.orderFee != null">
      #{record.orderFee,jdbcType=DECIMAL},
    </if>
    <if test="record.realizedSurplus != null">
      #{record.realizedSurplus,jdbcType=DECIMAL},
    </if>
    <if test="record.brokerId != null">
      #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.createdDate != null">
      #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.userId,jdbcType=BIGINT},
    #{record.currencyCode,jdbcType=VARCHAR},
    #{record.env,jdbcType=INTEGER},
    #{record.rewardTime,jdbcType=BIGINT},
    #{record.frozenStatus,jdbcType=INTEGER},
    #{record.availableBalance,jdbcType=DECIMAL},
    #{record.frozenBalance,jdbcType=DECIMAL},
    #{record.positionSize,jdbcType=DECIMAL},
    #{record.positionMargin,jdbcType=DECIMAL},
    #{record.positionFee,jdbcType=DECIMAL},
    #{record.orderMargin,jdbcType=DECIMAL},
    #{record.orderFee,jdbcType=DECIMAL},
    #{record.realizedSurplus,jdbcType=DECIMAL},
    #{record.brokerId,jdbcType=INTEGER},
    #{record.status,jdbcType=INTEGER},
    #{record.createdDate,jdbcType=TIMESTAMP},
    #{record.modifyDate,jdbcType=TIMESTAMP},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=BIGINT},
    <include refid="Batch_Insert_Values" />
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.userId != null">
      user_id = #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.currencyCode != null">
      currency_code = #{record.currencyCode,jdbcType=VARCHAR},
    </if>
    <if test="record.env != null">
      env = #{record.env,jdbcType=INTEGER},
    </if>
    <if test="record.rewardTime != null">
      reward_time = #{record.rewardTime,jdbcType=BIGINT},
    </if>
    <if test="record.frozenStatus != null">
      frozen_status = #{record.frozenStatus,jdbcType=INTEGER},
    </if>
    <if test="record.availableBalance != null">
      available_balance = #{record.availableBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.frozenBalance != null">
      frozen_balance = #{record.frozenBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.positionSize != null">
      position_size = #{record.positionSize,jdbcType=DECIMAL},
    </if>
    <if test="record.positionMargin != null">
      position_margin = #{record.positionMargin,jdbcType=DECIMAL},
    </if>
    <if test="record.positionFee != null">
      position_fee = #{record.positionFee,jdbcType=DECIMAL},
    </if>
    <if test="record.orderMargin != null">
      order_margin = #{record.orderMargin,jdbcType=DECIMAL},
    </if>
    <if test="record.orderFee != null">
      order_fee = #{record.orderFee,jdbcType=DECIMAL},
    </if>
    <if test="record.realizedSurplus != null">
      realized_surplus = #{record.realizedSurplus,jdbcType=DECIMAL},
    </if>
    <if test="record.brokerId != null">
      broker_id = #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.status != null">
      status = #{record.status,jdbcType=INTEGER},
    </if>
    <if test="record.createdDate != null">
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns" />
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values" />
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values" />
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey" />
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    user_id = VALUES(user_id), currency_code = VALUES(currency_code), env = VALUES(env), reward_time = VALUES(reward_time), frozen_status = VALUES(frozen_status), available_balance = VALUES(available_balance), frozen_balance = VALUES(frozen_balance), position_size = VALUES(position_size), position_margin = VALUES(position_margin), position_fee = VALUES(position_fee), order_margin = VALUES(order_margin), order_fee = VALUES(order_fee), realized_surplus = VALUES(realized_surplus), broker_id = VALUES(broker_id), status = VALUES(status), created_date = VALUES(created_date), modify_date = VALUES(modify_date)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update 
      <include refid="Table_Name" />
      <set>
        <include refid="Update_Set_From_Bean" />
      </set>
      where id = #{record.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="UserBalanceMap">
    select 
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByExample" resultMap="UserBalanceMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="UserBalanceMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="UserBalanceMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByPager" resultMap="UserBalanceMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>