<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.newex.dax.perpetual.data.HistorySettlementUserRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="HistorySettlementUserMap" type="cc.newex.dax.perpetual.domain.HistorySettlementUser">
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="contract_code" property="contractCode" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="settlement_date" property="settlementDate" jdbcType="TIMESTAMP" />
    <result column="time_index" property="timeIndex" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="before_balance" property="beforeBalance" jdbcType="DECIMAL" />
    <result column="after_balance" property="afterBalance" jdbcType="DECIMAL" />
    <result column="diff_balance" property="diffBalance" jdbcType="DECIMAL" />
    <result column="broker_id" property="brokerId" jdbcType="INTEGER" />
    <result column="settlement_amount" property="settlementAmount" jdbcType="DECIMAL" />
    <result column="settlement_price" property="settlementPrice" jdbcType="DECIMAL" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    history_settlement_user
  </sql>
  <sql id="Base_Column_List_Without_Id">
    contract_code, type, settlement_date, time_index, user_id, before_balance, after_balance, 
    diff_balance, broker_id, settlement_amount, settlement_price, created_date, modify_date
  </sql>
  <sql id="Base_Column_List">
    id, 
    <include refid="Base_Column_List_Without_Id" />
  </sql>
  <sql id="Insert_Columns">
    <if test="record.contractCode != null">
      contract_code,
    </if>
    <if test="record.type != null">
      type,
    </if>
    <if test="record.settlementDate != null">
      settlement_date,
    </if>
    <if test="record.timeIndex != null">
      time_index,
    </if>
    <if test="record.userId != null">
      user_id,
    </if>
    <if test="record.beforeBalance != null">
      before_balance,
    </if>
    <if test="record.afterBalance != null">
      after_balance,
    </if>
    <if test="record.diffBalance != null">
      diff_balance,
    </if>
    <if test="record.brokerId != null">
      broker_id,
    </if>
    <if test="record.settlementAmount != null">
      settlement_amount,
    </if>
    <if test="record.settlementPrice != null">
      settlement_price,
    </if>
    <if test="record.createdDate != null">
      created_date,
    </if>
    <if test="record.modifyDate != null">
      modify_date,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.contractCode != null">
      #{record.contractCode,jdbcType=VARCHAR},
    </if>
    <if test="record.type != null">
      #{record.type,jdbcType=INTEGER},
    </if>
    <if test="record.settlementDate != null">
      #{record.settlementDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.timeIndex != null">
      #{record.timeIndex,jdbcType=BIGINT},
    </if>
    <if test="record.userId != null">
      #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.beforeBalance != null">
      #{record.beforeBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.afterBalance != null">
      #{record.afterBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.diffBalance != null">
      #{record.diffBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.brokerId != null">
      #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.settlementAmount != null">
      #{record.settlementAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.settlementPrice != null">
      #{record.settlementPrice,jdbcType=DECIMAL},
    </if>
    <if test="record.createdDate != null">
      #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.contractCode,jdbcType=VARCHAR},
    #{record.type,jdbcType=INTEGER},
    #{record.settlementDate,jdbcType=TIMESTAMP},
    #{record.timeIndex,jdbcType=BIGINT},
    #{record.userId,jdbcType=BIGINT},
    #{record.beforeBalance,jdbcType=DECIMAL},
    #{record.afterBalance,jdbcType=DECIMAL},
    #{record.diffBalance,jdbcType=DECIMAL},
    #{record.brokerId,jdbcType=INTEGER},
    #{record.settlementAmount,jdbcType=DECIMAL},
    #{record.settlementPrice,jdbcType=DECIMAL},
    #{record.createdDate,jdbcType=TIMESTAMP},
    #{record.modifyDate,jdbcType=TIMESTAMP},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=BIGINT},
    <include refid="Batch_Insert_Values" />
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.contractCode != null">
      contract_code = #{record.contractCode,jdbcType=VARCHAR},
    </if>
    <if test="record.type != null">
      type = #{record.type,jdbcType=INTEGER},
    </if>
    <if test="record.settlementDate != null">
      settlement_date = #{record.settlementDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.timeIndex != null">
      time_index = #{record.timeIndex,jdbcType=BIGINT},
    </if>
    <if test="record.userId != null">
      user_id = #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.beforeBalance != null">
      before_balance = #{record.beforeBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.afterBalance != null">
      after_balance = #{record.afterBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.diffBalance != null">
      diff_balance = #{record.diffBalance,jdbcType=DECIMAL},
    </if>
    <if test="record.brokerId != null">
      broker_id = #{record.brokerId,jdbcType=INTEGER},
    </if>
    <if test="record.settlementAmount != null">
      settlement_amount = #{record.settlementAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.settlementPrice != null">
      settlement_price = #{record.settlementPrice,jdbcType=DECIMAL},
    </if>
    <if test="record.createdDate != null">
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.modifyDate != null">
      modify_date = #{record.modifyDate,jdbcType=TIMESTAMP},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns" />
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values" />
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values" />
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey" />
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    contract_code = VALUES(contract_code), type = VALUES(type), settlement_date = VALUES(settlement_date), time_index = VALUES(time_index), user_id = VALUES(user_id), before_balance = VALUES(before_balance), after_balance = VALUES(after_balance), diff_balance = VALUES(diff_balance), broker_id = VALUES(broker_id), settlement_amount = VALUES(settlement_amount), settlement_price = VALUES(settlement_price), created_date = VALUES(created_date), modify_date = VALUES(modify_date)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update 
      <include refid="Table_Name" />
      <set>
        <include refid="Update_Set_From_Bean" />
      </set>
      where id = #{record.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="HistorySettlementUserMap">
    select 
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByExample" resultMap="HistorySettlementUserMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="HistorySettlementUserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="HistorySettlementUserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByPager" resultMap="HistorySettlementUserMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>