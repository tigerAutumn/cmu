<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.dax.integration.data.msg.MessageTemplateRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="MessageTemplateMap" type="cc.newex.dax.integration.domain.msg.MessageTemplate">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="sign" property="sign" jdbcType="VARCHAR"/>
        <result column="subject" property="subject" jdbcType="VARCHAR"/>
        <result column="locale" property="locale" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="updated_date" property="updatedDate" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">int_message_template</sql>
    <sql id="Base_Column_List_Without_Id">
  	  	code ,sign ,subject ,locale ,type ,content ,created_date ,updated_date 			  </sql>
    <sql id="Base_Column_List">
        id ,
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.code != null">code,</if>
        <if test="record.sign != null">sign,</if>
        <if test="record.subject != null">subject,</if>
        <if test="record.locale != null">locale,</if>
        <if test="record.type != null">type,</if>
        <if test="record.content != null">content,</if>
        <if test="record.createdDate != null">created_date,</if>
        <if test="record.updatedDate != null">updated_date,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.code != null">#{record.code,jdbcType=VARCHAR},</if>
        <if test="record.sign != null">#{record.sign,jdbcType=VARCHAR},</if>
        <if test="record.subject != null">#{record.subject,jdbcType=VARCHAR},</if>
        <if test="record.locale != null">#{record.locale,jdbcType=VARCHAR},</if>
        <if test="record.type != null">#{record.type,jdbcType=VARCHAR},</if>
        <if test="record.content != null">#{record.content,jdbcType=VARCHAR},</if>
        <if test="record.createdDate != null">#{record.createdDate,jdbcType=TIMESTAMP},</if>
        <if test="record.updatedDate != null">#{record.updatedDate,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Batch_Insert_Values">
 #{record.code,jdbcType=VARCHAR},
		 					 #{record.sign,jdbcType=VARCHAR},
		 					 #{record.subject,jdbcType=VARCHAR},
		 					 #{record.locale,jdbcType=VARCHAR},
		 					 #{record.type,jdbcType=VARCHAR},
		 					 #{record.content,jdbcType=VARCHAR},
		 					 #{record.createdDate,jdbcType=TIMESTAMP},
		 					 #{record.updatedDate,jdbcType=TIMESTAMP},
		 	    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        #{record.id,jdbcType=INTEGER},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.code != null">code = #{record.code,jdbcType=VARCHAR} ,</if>
        <if test="record.sign != null">sign = #{record.sign,jdbcType=VARCHAR} ,</if>
        <if test="record.subject != null">subject = #{record.subject,jdbcType=VARCHAR} ,</if>
        <if test="record.locale != null">locale = #{record.locale,jdbcType=VARCHAR} ,</if>
        <if test="record.type != null">type = #{record.type,jdbcType=VARCHAR} ,</if>
        <if test="record.content != null">content = #{record.content,jdbcType=VARCHAR} ,</if>
        <if test="record.createdDate != null">created_date = #{record.createdDate,jdbcType=TIMESTAMP} ,</if>
        <if test="record.updatedDate != null">updated_date = #{record.updatedDate,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        code = VALUES(code) , sign = VALUES(sign) , subject = VALUES(subject) , locale = VALUES(locale) , type = VALUES(type) , content = VALUES(content) , created_date =
        VALUES(created_date) , updated_date = VALUES(updated_date)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=INTEGER}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id=#{record.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="MessageTemplateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByExample" resultMap="MessageTemplateMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="MessageTemplateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="MessageTemplateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="MessageTemplateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
