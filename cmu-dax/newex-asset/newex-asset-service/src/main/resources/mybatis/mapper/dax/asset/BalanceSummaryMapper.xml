<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.dax.asset.dao.BalanceSummaryRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="BalanceSummaryMap" type="cc.newex.dax.asset.domain.BalanceSummary">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="currency" property="currency" jdbcType="INTEGER"/>
        <result column="wallet_balance" property="walletBalance" jdbcType="DECIMAL"/>
        <result column="biz_balance" property="bizBalance" jdbcType="LONGVARCHAR"/>
        <result column="deposit_unconfirmed" property="depositUnconfirmed" jdbcType="DECIMAL"/>
        <result column="withdraw_unconfirmed" property="withdrawUnconfirmed" jdbcType="DECIMAL"/>
        <result column="difference" property="difference" jdbcType="DECIMAL"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">balance_summary</sql>
    <sql id="Base_Column_List_Without_Id">
  	  									currency ,								wallet_balance ,								biz_balance ,								deposit_unconfirmed ,								withdraw_unconfirmed ,								difference ,								create_date 			  </sql>
    <sql id="Base_Column_List">
        id ,
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.currency != null">currency,</if>
        <if test="record.walletBalance != null">wallet_balance,</if>
        <if test="record.bizBalance != null">biz_balance,</if>
        <if test="record.depositUnconfirmed != null">deposit_unconfirmed,</if>
        <if test="record.withdrawUnconfirmed != null">withdraw_unconfirmed,</if>
        <if test="record.difference != null">difference,</if>
        <if test="record.createDate != null">create_date,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.currency != null">#{record.currency,jdbcType=INTEGER},</if>
        <if test="record.walletBalance != null">#{record.walletBalance,jdbcType=DECIMAL},</if>
        <if test="record.bizBalance != null">#{record.bizBalance,jdbcType=LONGVARCHAR},</if>
        <if test="record.depositUnconfirmed != null">#{record.depositUnconfirmed,jdbcType=DECIMAL},</if>
        <if test="record.withdrawUnconfirmed != null">#{record.withdrawUnconfirmed,jdbcType=DECIMAL},</if>
        <if test="record.difference != null">#{record.difference,jdbcType=DECIMAL},</if>
        <if test="record.createDate != null">#{record.createDate,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Batch_Insert_Values">
								 #{record.currency,jdbcType=INTEGER},
		 					 #{record.walletBalance,jdbcType=DECIMAL},
		 					 #{record.bizBalance,jdbcType=LONGVARCHAR},
		 					 #{record.depositUnconfirmed,jdbcType=DECIMAL},
		 					 #{record.withdrawUnconfirmed,jdbcType=DECIMAL},
		 					 #{record.difference,jdbcType=DECIMAL},
		 					 #{record.createDate,jdbcType=TIMESTAMP},
		 	    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        #{record.id,jdbcType=BIGINT},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.currency != null">currency = #{record.currency,jdbcType=INTEGER} ,</if>
        <if test="record.walletBalance != null">wallet_balance = #{record.walletBalance,jdbcType=DECIMAL} ,</if>
        <if test="record.bizBalance != null">biz_balance = #{record.bizBalance,jdbcType=LONGVARCHAR} ,</if>
        <if test="record.depositUnconfirmed != null">deposit_unconfirmed = #{record.depositUnconfirmed,jdbcType=DECIMAL}
            ,
        </if>
        <if test="record.withdrawUnconfirmed != null">withdraw_unconfirmed =
            #{record.withdrawUnconfirmed,jdbcType=DECIMAL} ,
        </if>
        <if test="record.difference != null">difference = #{record.difference,jdbcType=DECIMAL} ,</if>
        <if test="record.createDate != null">create_date = #{record.createDate,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        currency = VALUES(currency) , wallet_balance = VALUES(wallet_balance) , biz_balance = VALUES(biz_balance) ,
        deposit_unconfirmed = VALUES(deposit_unconfirmed) , withdraw_unconfirmed = VALUES(withdraw_unconfirmed) ,
        difference = VALUES(difference) , create_date = VALUES(create_date)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=BIGINT}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id=#{record.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="BalanceSummaryMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByExample" resultMap="BalanceSummaryMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="BalanceSummaryMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="BalanceSummaryMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="BalanceSummaryMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
