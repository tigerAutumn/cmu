<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.newex.dax.asset.dao.AssetCurrencyCompressRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="AssetCurrencyCompressMap" type="cc.newex.dax.asset.domain.AssetCurrencyCompress">
    <id column="id" property="id" jdbcType="INTEGER"/>
    <result column="symbol" property="symbol" jdbcType="VARCHAR"/>
    <result column="extend_attrs" property="extendAttrs" jdbcType="LONGVARCHAR"/>
    <result column="withdrawable" property="withdrawable" jdbcType="INTEGER"/>
    <result column="rechargeable" property="rechargeable" jdbcType="INTEGER"/>
    <result column="sort" property="sort" jdbcType="INTEGER"/>
    <result column="online" property="online" jdbcType="INTEGER"/>
    <result column="exchange" property="exchange" jdbcType="INTEGER"/>
    <result column="receive" property="receive" jdbcType="INTEGER"/>
    <result column="transfer" property="transfer" jdbcType="INTEGER"/>
    <result column="withdraw_fee" property="withdrawFee" jdbcType="DECIMAL"/>
    <result column="deposit_confirm" property="depositConfirm" jdbcType="INTEGER"/>
    <result column="withdraw_confirm" property="withdrawConfirm" jdbcType="INTEGER"/>
    <result column="min_deposit_amount" property="minDepositAmount" jdbcType="DECIMAL"/>
    <result column="min_withdraw_amount" property="minWithdrawAmount" jdbcType="DECIMAL"/>
    <result column="max_withdraw_amount" property="maxWithdrawAmount" jdbcType="DECIMAL"/>
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
    <result column="broker_id" property="brokerId" jdbcType="INTEGER"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    asset_currency_compress
  </sql>
  <sql id="Base_Column_List_Without_Id">
    symbol, extend_attrs, withdrawable, rechargeable, sort, online, exchange, receive, 
    transfer, withdraw_fee, deposit_confirm, withdraw_confirm, min_deposit_amount, min_withdraw_amount, 
    max_withdraw_amount, update_date, broker_id
  </sql>
  <sql id="Base_Column_List">
    id,
    <include refid="Base_Column_List_Without_Id"/>
  </sql>
  <sql id="Insert_Columns">
    <if test="record.id != null">id,</if>
    <if test="record.symbol != null">
      symbol,
    </if>
    <if test="record.extendAttrs != null">
      extend_attrs,
    </if>
    <if test="record.withdrawable != null">
      withdrawable,
    </if>
    <if test="record.rechargeable != null">
      rechargeable,
    </if>
    <if test="record.sort != null">
      sort,
    </if>
    <if test="record.online != null">
      online,
    </if>
    <if test="record.exchange != null">
      exchange,
    </if>
    <if test="record.receive != null">
      receive,
    </if>
    <if test="record.transfer != null">
      transfer,
    </if>
    <if test="record.withdrawFee != null">
      withdraw_fee,
    </if>
    <if test="record.depositConfirm != null">
      deposit_confirm,
    </if>
    <if test="record.withdrawConfirm != null">
      withdraw_confirm,
    </if>
    <if test="record.minDepositAmount != null">
      min_deposit_amount,
    </if>
    <if test="record.minWithdrawAmount != null">
      min_withdraw_amount,
    </if>
    <if test="record.maxWithdrawAmount != null">
      max_withdraw_amount,
    </if>
    <if test="record.updateDate != null">
      update_date,
    </if>
    <if test="record.brokerId != null">
      broker_id,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.id != null">#{record.id,jdbcType=INTEGER},</if>
    <if test="record.symbol != null">
      #{record.symbol,jdbcType=VARCHAR},
    </if>
    <if test="record.extendAttrs != null">
      #{record.extendAttrs,jdbcType=LONGVARCHAR},
    </if>
    <if test="record.withdrawable != null">
      #{record.withdrawable,jdbcType=INTEGER},
    </if>
    <if test="record.rechargeable != null">
      #{record.rechargeable,jdbcType=INTEGER},
    </if>
    <if test="record.sort != null">
      #{record.sort,jdbcType=INTEGER},
    </if>
    <if test="record.online != null">
      #{record.online,jdbcType=INTEGER},
    </if>
    <if test="record.exchange != null">
      #{record.exchange,jdbcType=INTEGER},
    </if>
    <if test="record.receive != null">
      #{record.receive,jdbcType=INTEGER},
    </if>
    <if test="record.transfer != null">
      #{record.transfer,jdbcType=INTEGER},
    </if>
    <if test="record.withdrawFee != null">
      #{record.withdrawFee,jdbcType=DECIMAL},
    </if>
    <if test="record.depositConfirm != null">
      #{record.depositConfirm,jdbcType=INTEGER},
    </if>
    <if test="record.withdrawConfirm != null">
      #{record.withdrawConfirm,jdbcType=INTEGER},
    </if>
    <if test="record.minDepositAmount != null">
      #{record.minDepositAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.minWithdrawAmount != null">
      #{record.minWithdrawAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.maxWithdrawAmount != null">
      #{record.maxWithdrawAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.updateDate != null">
      #{record.updateDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.brokerId != null">
      #{record.brokerId,jdbcType=INTEGER},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.id,jdbcType=INTEGER},
    #{record.symbol,jdbcType=VARCHAR},
    #{record.extendAttrs,jdbcType=LONGVARCHAR},
    #{record.withdrawable,jdbcType=INTEGER},
    #{record.rechargeable,jdbcType=INTEGER},
    #{record.sort,jdbcType=INTEGER},
    #{record.online,jdbcType=INTEGER},
    #{record.exchange,jdbcType=INTEGER},
    #{record.receive,jdbcType=INTEGER},
    #{record.transfer,jdbcType=INTEGER},
    #{record.withdrawFee,jdbcType=DECIMAL},
    #{record.depositConfirm,jdbcType=INTEGER},
    #{record.withdrawConfirm,jdbcType=INTEGER},
    #{record.minDepositAmount,jdbcType=DECIMAL},
    #{record.minWithdrawAmount,jdbcType=DECIMAL},
    #{record.maxWithdrawAmount,jdbcType=DECIMAL},
    #{record.updateDate,jdbcType=TIMESTAMP},
    #{record.brokerId,jdbcType=INTEGER},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=INTEGER},
    <include refid="Batch_Insert_Values"/>
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.id != null">id = #{record.id,jdbcType=INTEGER} ,</if>
    <if test="record.symbol != null">
      symbol = #{record.symbol,jdbcType=VARCHAR},
    </if>
    <if test="record.extendAttrs != null">
      extend_attrs = #{record.extendAttrs,jdbcType=LONGVARCHAR},
    </if>
    <if test="record.withdrawable != null">
      withdrawable = #{record.withdrawable,jdbcType=INTEGER},
    </if>
    <if test="record.rechargeable != null">
      rechargeable = #{record.rechargeable,jdbcType=INTEGER},
    </if>
    <if test="record.sort != null">
      sort = #{record.sort,jdbcType=INTEGER},
    </if>
    <if test="record.online != null">
      online = #{record.online,jdbcType=INTEGER},
    </if>
    <if test="record.exchange != null">
      exchange = #{record.exchange,jdbcType=INTEGER},
    </if>
    <if test="record.receive != null">
      receive = #{record.receive,jdbcType=INTEGER},
    </if>
    <if test="record.transfer != null">
      transfer = #{record.transfer,jdbcType=INTEGER},
    </if>
    <if test="record.withdrawFee != null">
      withdraw_fee = #{record.withdrawFee,jdbcType=DECIMAL},
    </if>
    <if test="record.depositConfirm != null">
      deposit_confirm = #{record.depositConfirm,jdbcType=INTEGER},
    </if>
    <if test="record.withdrawConfirm != null">
      withdraw_confirm = #{record.withdrawConfirm,jdbcType=INTEGER},
    </if>
    <if test="record.minDepositAmount != null">
      min_deposit_amount = #{record.minDepositAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.minWithdrawAmount != null">
      min_withdraw_amount = #{record.minWithdrawAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.maxWithdrawAmount != null">
      max_withdraw_amount = #{record.maxWithdrawAmount,jdbcType=DECIMAL},
    </if>
    <if test="record.updateDate != null">
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.brokerId != null">
      broker_id = #{record.brokerId,jdbcType=INTEGER},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ${shardTable.prefix}_asset_currency_compress
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns"/>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values"/>
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into ${shardTable.prefix}_asset_currency_compress
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id"/>
    </trim>
    values
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values"/>
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into ${shardTable.prefix}_asset_currency_compress
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List"/>
    </trim>
    values
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey"/>
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    symbol = VALUES(symbol), extend_attrs = VALUES(extend_attrs), withdrawable = VALUES(withdrawable), rechargeable =
    VALUES(rechargeable), sort = VALUES(sort), online = VALUES(online), exchange = VALUES(exchange), receive =
    VALUES(receive), transfer = VALUES(transfer), withdraw_fee = VALUES(withdraw_fee), deposit_confirm =
    VALUES(deposit_confirm), withdraw_confirm = VALUES(withdraw_confirm), min_deposit_amount =
    VALUES(min_deposit_amount), min_withdraw_amount = VALUES(min_withdraw_amount), max_withdraw_amount =
    VALUES(max_withdraw_amount), update_date = VALUES(update_date), broker_id = VALUES(broker_id)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from ${shardTable.prefix}_asset_currency_compress
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from ${shardTable.prefix}_asset_currency_compress
    where id in
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=INTEGER}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update ${shardTable.prefix}_asset_currency_compress
    <set>
      <include refid="Update_Set_From_Bean"/>
    </set>
    where id = #{record.id,jdbcType=INTEGER}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update ${shardTable.prefix}_asset_currency_compress
    <set>
      <include refid="Update_Set_From_Bean"/>
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update ${shardTable.prefix}_asset_currency_compress
      <set>
        <include refid="Update_Set_From_Bean"/>
      </set>
      where id = #{record.id,jdbcType=INTEGER}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="AssetCurrencyCompressMap">
    select
    <include refid="Base_Column_List"/>
    from ${shardTable.prefix}_asset_currency_compress
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByExample" resultMap="AssetCurrencyCompressMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="AssetCurrencyCompressMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List"/>
    from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="AssetCurrencyCompressMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List"/>
    from ${shardTable.prefix}_asset_currency_compress
    where id in
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=INTEGER}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) as total from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*) as total from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <select id="selectByPager" resultMap="AssetCurrencyCompressMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List"/>
    from ${shardTable.prefix}_asset_currency_compress
    <if test="example != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>
