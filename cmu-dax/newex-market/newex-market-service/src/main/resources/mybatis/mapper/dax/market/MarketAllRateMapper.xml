<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.dax.market.data.MarketAllRateRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="MarketAllRateMap" type="cc.newex.dax.market.domain.MarketAllRate">
        <result column="id" property="id" jdbcType="BIGINT"/>
        <result column="rate_name" property="rateName" jdbcType="VARCHAR"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="rate_parities" property="rateParities" jdbcType="DOUBLE"/>
        <result column="pair_avg" property="pairAvg" jdbcType="DOUBLE"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">market_all_rate</sql>
    <sql id="Base_Column_List_Without_Id">
        id , rate_name , modify_time , status , create_time , rate_parities,pair_avg
    </sql>
    <sql id="Base_Column_List">
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.id != null">ID,</if>
        <if test="record.rateName != null">rate_name,</if>
        <if test="record.modifyTime != null">modify_time,</if>
        <if test="record.status != null">status,</if>
        <if test="record.createTime != null">create_time,</if>
        <if test="record.rateParities != null">rate_parities,</if>
        <if test="record.pairAvg != null">pair_avg,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.id != null">#{record.id,jdbcType=BIGINT},</if>
        <if test="record.rateName != null">#{record.rateName,jdbcType=VARCHAR},</if>
        <if test="record.modifyTime != null">#{record.modifyTime,jdbcType=TIMESTAMP},</if>
        <if test="record.status != null">#{record.status,jdbcType=TINYINT},</if>
        <if test="record.createTime != null">#{record.createTime,jdbcType=TIMESTAMP},</if>
        <if test="record.rateParities != null">#{record.rateParities,jdbcType=DOUBLE},</if>
        <if test="record.pairAvg != null">#{record.pairAvg,jdbcType=DOUBLE},</if>
    </sql>
    <sql id="Batch_Insert_Values">
        #{record.id,jdbcType=BIGINT},
        #{record.rateName,jdbcType=VARCHAR},
        #{record.modifyTime,jdbcType=TIMESTAMP},
        #{record.status,jdbcType=TINYINT},
        #{record.createTime,jdbcType=TIMESTAMP},
        #{record.rateParities,jdbcType=DOUBLE},
        #{record.pairAvg,jdbcType=DOUBLE},
    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.id != null">ID = #{record.id,jdbcType=BIGINT} ,</if>
        <if test="record.rateName != null">rate_name = #{record.rateName,jdbcType=VARCHAR} ,</if>
        <if test="record.modifyTime != null">modify_time = #{record.modifyTime,jdbcType=TIMESTAMP} ,</if>
        <if test="record.status != null">status = #{record.status,jdbcType=TINYINT} ,</if>
        <if test="record.createTime != null">create_time = #{record.createTime,jdbcType=TIMESTAMP} ,</if>
        <if test="record.rateParities != null">rate_parities = #{record.rateParities,jdbcType=DOUBLE} ,</if>
        <if test="record.pairAvg != null">pair_avg = #{record.pairAvg,jdbcType=DOUBLE} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        ID = VALUES(ID) , rate_name = VALUES(rate_name) , modify_time = VALUES(modify_time) , status = VALUES(status) ,
        create_time = VALUES(create_time) , rate_parities = VALUES(rate_parities)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where ID = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where ID in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where ID = #{record.id,jdbcType=BIGINT}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where ID=#{record.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="MarketAllRateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where ID = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByExample" resultMap="MarketAllRateMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="MarketAllRateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="MarketAllRateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where ID IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="MarketAllRateMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <select id="getRateByName" parameterType="String" resultType="cc.newex.dax.market.domain.MarketAllRate">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where rate_name = #{name} order by id desc limit 1
    </select>

    <select id="getRateByNameOrderBy" parameterType="String" resultType="cc.newex.dax.market.domain.MarketAllRate">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where rate_name = #{name} order by create_time desc limit 1
    </select>

    <select id="selectAll" resultMap="MarketAllRateMap">
        select
        *
        from
        market_all_rate
        where status = 1;
    </select>

    <select id="getMarketAllRateTwoWeekList" parameterType="String" resultMap="MarketAllRateMap">
        select
        *
        from
        market_all_rate
        where status = 1 and rate_name = #{name}  order by create_time desc limit 10;
    </select>

    <select id="getMarketAllRateTwoWeekListUSD_CNY" parameterType="String" resultMap="MarketAllRateMap">
        select
        *
        from
        market_all_rate
        where status = 1 and rate_name = #{name}  order by create_time desc limit 14;
    </select>

    <select id="selectPairAvg" resultType="java.math.BigDecimal">
        select
        avg(rate_parities)
        from
        market_all_rate
        where status = 1 and create_time > #{date} and rate_name = #{name}
        order by create_time desc
        limit 14;
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
