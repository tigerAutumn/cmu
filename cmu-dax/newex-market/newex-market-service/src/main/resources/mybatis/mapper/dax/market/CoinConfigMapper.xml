<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.dax.market.data.CoinConfigRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="CoinConfigMap" type="cc.newex.dax.market.domain.CoinConfig">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="symbol" property="symbol" jdbcType="INTEGER"/>
        <result column="symbol_name" property="symbolName" jdbcType="VARCHAR"/>
        <result column="index_market_from" property="indexMarketFrom" jdbcType="INTEGER"/>
        <result column="symbol_mark" property="symbolMark" jdbcType="VARCHAR"/>
        <result column="market_from" property="marketFrom" jdbcType="VARCHAR"/>
        <result column="pricePoint" property="pricePoint" jdbcType="INTEGER"/>
        <result column="invalid_switch" property="invalidSwitch" jdbcType="TINYINT"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="modify_date" property="modifyDate" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">coin_config</sql>
    <sql id="Base_Column_List_Without_Id">
        symbol, symbol_name, index_market_from, symbol_mark, market_from, pricePoint, invalid_switch, type, status, created_date, modify_date              </sql>
    <sql id="Base_Column_List">
        id ,
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.symbol != null">symbol,</if>
        <if test="record.symbolName != null">symbol_name,</if>
        <if test="record.indexMarketFrom != null">index_market_from,</if>
        <if test="record.symbolMark != null">symbol_mark,</if>
        <if test="record.marketFrom != null">market_from,</if>
        <if test="record.pricePoint != null">pricePoint,</if>
        <if test="record.invalidSwitch != null">invalid_switch,</if>
        <if test="record.type != null">type,</if>
        <if test="record.status != null">status,</if>
        <if test="record.createdDate != null">created_date,</if>
        <if test="record.modifyDate != null">modify_date,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.symbol != null">#{record.symbol,jdbcType=INTEGER},</if>
        <if test="record.symbolName != null">#{record.symbolName,jdbcType=VARCHAR},</if>
        <if test="record.indexMarketFrom != null">#{record.indexMarketFrom,jdbcType=INTEGER},</if>
        <if test="record.symbolMark != null">#{record.symbolMark,jdbcType=VARCHAR},</if>
        <if test="record.marketFrom != null">#{record.marketFrom,jdbcType=VARCHAR},</if>
        <if test="record.pricePoint != null">#{record.pricePoint,jdbcType=INTEGER},</if>
        <if test="record.invalidSwitch != null">#{record.invalidSwitch,jdbcType=TINYINT},</if>
        <if test="record.type != null">#{record.type,jdbcType=INTEGER},</if>
        <if test="record.status != null">#{record.status,jdbcType=INTEGER},</if>
        <if test="record.createdDate != null">#{record.createdDate,jdbcType=TIMESTAMP},</if>
        <if test="record.modifyDate != null">#{record.modifyDate,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Batch_Insert_Values">
        #{record.symbol,jdbcType=INTEGER},
        #{record.symbolName,jdbcType=VARCHAR},
        #{record.indexMarketFrom,jdbcType=INTEGER},
        #{record.symbolMark,jdbcType=VARCHAR},
        #{record.marketFrom,jdbcType=VARCHAR},
        #{record.pricePoint,jdbcType=INTEGER},
        #{record.invalidSwitch,jdbcType=TINYINT},
        #{record.type,jdbcType=INTEGER},
        #{record.status,jdbcType=INTEGER},
        #{record.createdDate,jdbcType=TIMESTAMP},
        #{record.modifyDate,jdbcType=TIMESTAMP},
    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        #{record.id,jdbcType=BIGINT},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.symbol != null">symbol = #{record.symbol,jdbcType=INTEGER} ,</if>
        <if test="record.symbolName != null">symbol_name = #{record.symbolName,jdbcType=VARCHAR} ,</if>
        <if test="record.indexMarketFrom != null">index_market_from = #{record.indexMarketFrom,jdbcType=INTEGER} ,</if>
        <if test="record.symbolMark != null">symbol_mark = #{record.symbolMark,jdbcType=VARCHAR} ,</if>
        <if test="record.marketFrom != null">market_from = #{record.marketFrom,jdbcType=VARCHAR} ,</if>
        <if test="record.pricePoint != null">pricePoint = #{record.pricePoint,jdbcType=INTEGER} ,</if>
        <if test="record.invalidSwitch != null">invalid_switch = #{record.invalidSwitch,jdbcType=TINYINT} ,</if>
        <if test="record.type != null">type = #{record.type,jdbcType=INTEGER} ,</if>
        <if test="record.status != null">status = #{record.status,jdbcType=INTEGER} ,</if>
        <if test="record.createdDate != null">created_date = #{record.createdDate,jdbcType=TIMESTAMP} ,</if>
        <if test="record.modifyDate != null">modify_date = #{record.modifyDate,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        symbol = VALUES(symbol) , symbol_name = VALUES(symbol_name) , index_market_from = VALUES(index_market_from) ,
        symbol_mark = VALUES(symbol_mark) , market_from = VALUES(market_from) , pricePoint = VALUES(pricePoint) ,
        invalid_switch = VALUES(invalid_switch) , type = VALUES(type) , status = VALUES(status) , created_date =
        VALUES(created_date) , modify_date = VALUES(modify_date)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=BIGINT}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id=#{record.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="CoinConfigMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByExample" resultMap="CoinConfigMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="CoinConfigMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="CoinConfigMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="CoinConfigMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
