<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.newex.dax.users.data.UserKycInfoRepository">
  <!-- CodeBuilder Generated -->
  <resultMap id="UserKycInfoMap" type="cc.newex.dax.users.domain.UserKycInfo">
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="first_name" property="firstName" jdbcType="VARCHAR" />
    <result column="middle_name" property="middleName" jdbcType="VARCHAR" />
    <result column="last_name" property="lastName" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="VARCHAR" />
    <result column="country" property="country" jdbcType="INTEGER" />
    <result column="card_type" property="cardType" jdbcType="INTEGER" />
    <result column="card_number" property="cardNumber" jdbcType="VARCHAR" />
    <result column="valid_date" property="validDate" jdbcType="VARCHAR" />
    <result column="address1" property="address1" jdbcType="VARCHAR" />
    <result column="address2" property="address2" jdbcType="VARCHAR" />
    <result column="address3" property="address3" jdbcType="VARCHAR" />
    <result column="city" property="city" jdbcType="VARCHAR" />
    <result column="zip_code" property="zipCode" jdbcType="VARCHAR" />
    <result column="created_date" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="updated_date" property="updatedDate" jdbcType="TIMESTAMP" />
    <result column="broker_id" property="brokerId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" suffix=")" prefixOverrides="and">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Table_Name">
    user_kyc_info
  </sql>
  <sql id="Base_Column_List_Without_Id">
    user_id, first_name, middle_name, last_name, gender, country, card_type, card_number, 
    valid_date, address1, address2, address3, city, zip_code, created_date, updated_date, 
    broker_id
  </sql>
  <sql id="Base_Column_List">
    id, 
    <include refid="Base_Column_List_Without_Id" />
  </sql>
  <sql id="Insert_Columns">
    <if test="record.userId != null">
      user_id,
    </if>
    <if test="record.firstName != null">
      first_name,
    </if>
    <if test="record.middleName != null">
      middle_name,
    </if>
    <if test="record.lastName != null">
      last_name,
    </if>
    <if test="record.gender != null">
      gender,
    </if>
    <if test="record.country != null">
      country,
    </if>
    <if test="record.cardType != null">
      card_type,
    </if>
    <if test="record.cardNumber != null">
      card_number,
    </if>
    <if test="record.validDate != null">
      valid_date,
    </if>
    <if test="record.address1 != null">
      address1,
    </if>
    <if test="record.address2 != null">
      address2,
    </if>
    <if test="record.address3 != null">
      address3,
    </if>
    <if test="record.city != null">
      city,
    </if>
    <if test="record.zipCode != null">
      zip_code,
    </if>
    <if test="record.createdDate != null">
      created_date,
    </if>
    <if test="record.updatedDate != null">
      updated_date,
    </if>
    <if test="record.brokerId != null">
      broker_id,
    </if>
  </sql>
  <sql id="Insert_Values">
    <if test="record.userId != null">
      #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.firstName != null">
      #{record.firstName,jdbcType=VARCHAR},
    </if>
    <if test="record.middleName != null">
      #{record.middleName,jdbcType=VARCHAR},
    </if>
    <if test="record.lastName != null">
      #{record.lastName,jdbcType=VARCHAR},
    </if>
    <if test="record.gender != null">
      #{record.gender,jdbcType=VARCHAR},
    </if>
    <if test="record.country != null">
      #{record.country,jdbcType=INTEGER},
    </if>
    <if test="record.cardType != null">
      #{record.cardType,jdbcType=INTEGER},
    </if>
    <if test="record.cardNumber != null">
      #{record.cardNumber,jdbcType=VARCHAR},
    </if>
    <if test="record.validDate != null">
      #{record.validDate,jdbcType=VARCHAR},
    </if>
    <if test="record.address1 != null">
      #{record.address1,jdbcType=VARCHAR},
    </if>
    <if test="record.address2 != null">
      #{record.address2,jdbcType=VARCHAR},
    </if>
    <if test="record.address3 != null">
      #{record.address3,jdbcType=VARCHAR},
    </if>
    <if test="record.city != null">
      #{record.city,jdbcType=VARCHAR},
    </if>
    <if test="record.zipCode != null">
      #{record.zipCode,jdbcType=VARCHAR},
    </if>
    <if test="record.createdDate != null">
      #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.updatedDate != null">
      #{record.updatedDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.brokerId != null">
      #{record.brokerId,jdbcType=INTEGER},
    </if>
  </sql>
  <sql id="Batch_Insert_Values">
    #{record.userId,jdbcType=BIGINT},
    #{record.firstName,jdbcType=VARCHAR},
    #{record.middleName,jdbcType=VARCHAR},
    #{record.lastName,jdbcType=VARCHAR},
    #{record.gender,jdbcType=VARCHAR},
    #{record.country,jdbcType=INTEGER},
    #{record.cardType,jdbcType=INTEGER},
    #{record.cardNumber,jdbcType=VARCHAR},
    #{record.validDate,jdbcType=VARCHAR},
    #{record.address1,jdbcType=VARCHAR},
    #{record.address2,jdbcType=VARCHAR},
    #{record.address3,jdbcType=VARCHAR},
    #{record.city,jdbcType=VARCHAR},
    #{record.zipCode,jdbcType=VARCHAR},
    #{record.createdDate,jdbcType=TIMESTAMP},
    #{record.updatedDate,jdbcType=TIMESTAMP},
    #{record.brokerId,jdbcType=INTEGER},
  </sql>
  <sql id="Batch_Insert_Values_On_DuplicateKey">
    #{record.id,jdbcType=BIGINT},
    <include refid="Batch_Insert_Values" />
  </sql>
  <sql id="Update_Set_From_Bean">
    <if test="record.userId != null">
      user_id = #{record.userId,jdbcType=BIGINT},
    </if>
    <if test="record.firstName != null">
      first_name = #{record.firstName,jdbcType=VARCHAR},
    </if>
    <if test="record.middleName != null">
      middle_name = #{record.middleName,jdbcType=VARCHAR},
    </if>
    <if test="record.lastName != null">
      last_name = #{record.lastName,jdbcType=VARCHAR},
    </if>
    <if test="record.gender != null">
      gender = #{record.gender,jdbcType=VARCHAR},
    </if>
    <if test="record.country != null">
      country = #{record.country,jdbcType=INTEGER},
    </if>
    <if test="record.cardType != null">
      card_type = #{record.cardType,jdbcType=INTEGER},
    </if>
    <if test="record.cardNumber != null">
      card_number = #{record.cardNumber,jdbcType=VARCHAR},
    </if>
    <if test="record.validDate != null">
      valid_date = #{record.validDate,jdbcType=VARCHAR},
    </if>
    <if test="record.address1 != null">
      address1 = #{record.address1,jdbcType=VARCHAR},
    </if>
    <if test="record.address2 != null">
      address2 = #{record.address2,jdbcType=VARCHAR},
    </if>
    <if test="record.address3 != null">
      address3 = #{record.address3,jdbcType=VARCHAR},
    </if>
    <if test="record.city != null">
      city = #{record.city,jdbcType=VARCHAR},
    </if>
    <if test="record.zipCode != null">
      zip_code = #{record.zipCode,jdbcType=VARCHAR},
    </if>
    <if test="record.createdDate != null">
      created_date = #{record.createdDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.updatedDate != null">
      updated_date = #{record.updatedDate,jdbcType=TIMESTAMP},
    </if>
    <if test="record.brokerId != null">
      broker_id = #{record.brokerId,jdbcType=INTEGER},
    </if>
  </sql>
  <!-- insert -->
  <insert id="insert" parameterType="java.util.Map">
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Insert_Columns" />
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <include refid="Insert_Values" />
    </trim>
  </insert>
  <insert id="batchInsert" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List_Without_Id" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values" />
      </trim>
    </foreach>
  </insert>
  <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
    insert into 
    <include refid="Table_Name" />
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <include refid="Base_Column_List" />
    </trim>
    values 
    <foreach collection="records" item="record" index="index" separator=",">
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <include refid="Batch_Insert_Values_On_DuplicateKey" />
      </trim>
    </foreach>
    ON DUPLICATE KEY UPDATE
    user_id = VALUES(user_id), first_name = VALUES(first_name), middle_name = VALUES(middle_name), last_name = VALUES(last_name), gender = VALUES(gender), country = VALUES(country), card_type = VALUES(card_type), card_number = VALUES(card_number), valid_date = VALUES(valid_date), address1 = VALUES(address1), address2 = VALUES(address2), address3 = VALUES(address3), city = VALUES(city), zip_code = VALUES(zip_code), created_date = VALUES(created_date), updated_date = VALUES(updated_date), broker_id = VALUES(broker_id)
  </insert>
  <!-- end insert -->
  <!-- delete -->
  <delete id="deleteById" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <delete id="deleteIn" parameterType="java.util.Map">
    delete from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </delete>
  <!-- end delete -->
  <!-- update -->
  <update id="updateById" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    where id = #{record.id,jdbcType=BIGINT}
  </update>
  <update id="updateByExample" parameterType="java.util.Map">
    update 
    <include refid="Table_Name" />
    <set>
      <include refid="Update_Set_From_Bean" />
    </set>
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </update>
  <update id="batchUpdate" parameterType="java.util.Map">
    <foreach collection="records" item="record" index="index" open="" close="" separator=";">
      update 
      <include refid="Table_Name" />
      <set>
        <include refid="Update_Set_From_Bean" />
      </set>
      where id = #{record.id,jdbcType=BIGINT}
    </foreach>
  </update>
  <!-- end update -->
  <!-- select -->
  <select id="selectById" parameterType="java.util.Map" resultMap="UserKycInfoMap">
    select 
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByExample" resultMap="UserKycInfoMap" parameterType="java.util.Map">
    select
    <if test="example != null and example.distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectOneByExample" resultMap="UserKycInfoMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="example != null and example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectIn" resultMap="UserKycInfoMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    where id in 
    <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
      #{record.id,jdbcType=BIGINT}
    </foreach>
  </select>
  <select id="countByExample" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="countByPager" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(1) as total from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="selectByPager" resultMap="UserKycInfoMap" parameterType="java.util.Map">
    select
    <include refid="Base_Column_List" />
    from 
    <include refid="Table_Name" />
    <if test="example != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="pager.sortItem != null and pager.sortItem != ''">
      order by ${pager.sortItem} ${pager.sortType}
    </if>
    limit #{pager.startIndex} , #{pager.pageSize}
  </select>
  <!-- end select -->
  <!-- My Custom Interfaces -->
</mapper>