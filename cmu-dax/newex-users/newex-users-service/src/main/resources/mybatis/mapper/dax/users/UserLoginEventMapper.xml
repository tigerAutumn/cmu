<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.dax.users.data.UserLoginEventRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="UserLoginEventMap" type="cc.newex.dax.users.domain.UserLoginEvent">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="device_id" property="deviceId" jdbcType="VARCHAR"/>
        <result column="ip_address" property="ipAddress" jdbcType="BIGINT"/>
        <result column="last_ip_address" property="lastIpAddress" jdbcType="BIGINT"/>
        <result column="user_agent" property="userAgent" jdbcType="VARCHAR"/>
        <result column="region" property="region" jdbcType="VARCHAR"/>
        <result column="session_id" property="sessionId" jdbcType="VARCHAR"/>
        <result column="last_login_date" property="lastLoginDate" jdbcType="TIMESTAMP"/>
        <result column="created_date" property="createdDate" jdbcType="TIMESTAMP"/>
        <result column="updated_date" property="updatedDate" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">user_login_event</sql>
    <sql id="Base_Column_List_Without_Id">
        user_id , device_id , ip_address , last_ip_address , user_agent , region , session_id , last_login_date ,
        created_date , updated_date
    </sql>
    <sql id="Base_Column_List">
        id ,
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.userId != null">user_id,</if>
        <if test="record.deviceId != null">device_id,</if>
        <if test="record.ipAddress != null">ip_address,</if>
        <if test="record.lastIpAddress != null">last_ip_address,</if>
        <if test="record.userAgent != null">user_agent,</if>
        <if test="record.region != null">region,</if>
        <if test="record.sessionId != null">session_id,</if>
        <if test="record.lastLoginDate != null">last_login_date,</if>
        <if test="record.createdDate != null">created_date,</if>
        <if test="record.updatedDate != null">updated_date,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.userId != null">#{record.userId,jdbcType=BIGINT},</if>
        <if test="record.deviceId != null">#{record.deviceId,jdbcType=VARCHAR},</if>
        <if test="record.ipAddress != null">#{record.ipAddress,jdbcType=BIGINT},</if>
        <if test="record.lastIpAddress != null">#{record.lastIpAddress,jdbcType=BIGINT},</if>
        <if test="record.userAgent != null">#{record.userAgent,jdbcType=VARCHAR},</if>
        <if test="record.region != null">#{record.region,jdbcType=VARCHAR},</if>
        <if test="record.sessionId != null">#{record.sessionId,jdbcType=VARCHAR},</if>
        <if test="record.lastLoginDate != null">#{record.lastLoginDate,jdbcType=TIMESTAMP},</if>
        <if test="record.createdDate != null">#{record.createdDate,jdbcType=TIMESTAMP},</if>
        <if test="record.updatedDate != null">#{record.updatedDate,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Batch_Insert_Values">
        #{record.userId,jdbcType=BIGINT},
        #{record.deviceId,jdbcType=VARCHAR},
        #{record.ipAddress,jdbcType=BIGINT},
        #{record.lastIpAddress,jdbcType=BIGINT},
        #{record.userAgent,jdbcType=VARCHAR},
        #{record.region,jdbcType=VARCHAR},
        #{record.sessionId,jdbcType=VARCHAR},
        #{record.lastLoginDate,jdbcType=TIMESTAMP},
        #{record.createdDate,jdbcType=TIMESTAMP},
        #{record.updatedDate,jdbcType=TIMESTAMP},
    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        #{record.id,jdbcType=BIGINT},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.userId != null">user_id = #{record.userId,jdbcType=BIGINT} ,</if>
        <if test="record.deviceId != null">device_id = #{record.deviceId,jdbcType=VARCHAR} ,</if>
        <if test="record.ipAddress != null">ip_address = #{record.ipAddress,jdbcType=BIGINT} ,</if>
        <if test="record.lastIpAddress != null">last_ip_address = #{record.lastIpAddress,jdbcType=BIGINT} ,</if>
        <if test="record.userAgent != null">user_agent = #{record.userAgent,jdbcType=VARCHAR} ,</if>
        <if test="record.region != null">region = #{record.region,jdbcType=VARCHAR} ,</if>
        <if test="record.sessionId != null">session_id = #{record.sessionId,jdbcType=VARCHAR} ,</if>
        <if test="record.lastLoginDate != null">last_login_date = #{record.lastLoginDate,jdbcType=TIMESTAMP} ,</if>
        <if test="record.createdDate != null">created_date = #{record.createdDate,jdbcType=TIMESTAMP} ,</if>
        <if test="record.updatedDate != null">updated_date = #{record.updatedDate,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into
        <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        user_id = VALUES(user_id) , device_id = VALUES(device_id) , ip_address = VALUES(ip_address) , last_ip_address =
        VALUES(last_ip_address) , user_agent = VALUES(user_agent) , region = VALUES(region) , session_id =
        VALUES(session_id) , last_login_date = VALUES(last_login_date) , created_date = VALUES(created_date) ,
        updated_date = VALUES(updated_date)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from
        <include refid="Table_Name"/>
        where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=BIGINT}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update
        <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update
            <include refid="Table_Name"/>
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id=#{record.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="UserLoginEventMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByExample" resultMap="UserLoginEventMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="UserLoginEventMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="UserLoginEventMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=BIGINT}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="UserLoginEventMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from
        <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
