<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cc.newex.wallet.dao.AddressRepository">
    <!-- CodeBuilder  Generated-->
    <resultMap id="AddressMap" type="cc.newex.wallet.pojo.Address">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="balance" property="balance" jdbcType="DECIMAL"/>
        <result column="biz" property="biz" jdbcType="INTEGER"/>
        <result column="nonce" property="nonce" jdbcType="INTEGER"/>
        <result column="index" property="index" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP"/>
        <result column="update_date" property="updateDate" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Table_Name">address</sql>
    <sql id="Base_Column_List_Without_Id">
  	  									user_id ,								address ,								balance ,								biz ,								nonce ,								`index` ,								status ,								create_date ,								update_date 			  </sql>
    <sql id="Base_Column_List">
        id ,
        <include refid="Base_Column_List_Without_Id"/>
    </sql>
    <sql id="Insert_Columns">
        <if test="record.userId != null">user_id,</if>
        <if test="record.address != null">address,</if>
        <if test="record.balance != null">balance,</if>
        <if test="record.biz != null">biz,</if>
        <if test="record.nonce != null">nonce,</if>
        <if test="record.index != null">`index`,</if>
        <if test="record.status != null">status,</if>
        <if test="record.createDate != null">create_date,</if>
        <if test="record.updateDate != null">update_date,</if>
    </sql>
    <sql id="Insert_Values">
        <if test="record.userId != null">#{record.userId,jdbcType=BIGINT},</if>
        <if test="record.address != null">#{record.address,jdbcType=VARCHAR},</if>
        <if test="record.balance != null">#{record.balance,jdbcType=DECIMAL},</if>
        <if test="record.biz != null">#{record.biz,jdbcType=INTEGER},</if>
        <if test="record.nonce != null">#{record.nonce,jdbcType=INTEGER},</if>
        <if test="record.index != null">#{record.index,jdbcType=INTEGER},</if>
        <if test="record.status != null">#{record.status,jdbcType=TINYINT},</if>
        <if test="record.createDate != null">#{record.createDate,jdbcType=TIMESTAMP},</if>
        <if test="record.updateDate != null">#{record.updateDate,jdbcType=TIMESTAMP},</if>
    </sql>
    <sql id="Batch_Insert_Values">
								 #{record.userId,jdbcType=BIGINT},
		 					 #{record.address,jdbcType=VARCHAR},
		 					 #{record.balance,jdbcType=DECIMAL},
		 					 #{record.biz,jdbcType=INTEGER},
		 					 #{record.nonce,jdbcType=INTEGER},
		 					 #{record.index,jdbcType=INTEGER},
		 					 #{record.status,jdbcType=TINYINT},
		 					 #{record.createDate,jdbcType=TIMESTAMP},
		 					 #{record.updateDate,jdbcType=TIMESTAMP},
		 	    </sql>
    <sql id="Batch_Insert_Values_On_DuplicateKey">
        #{record.id,jdbcType=INTEGER},
        <include refid="Batch_Insert_Values"/>
    </sql>
    <sql id="Update_Set_From_Bean">
        <if test="record.userId != null">user_id = #{record.userId,jdbcType=BIGINT} ,</if>
        <if test="record.address != null">address = #{record.address,jdbcType=VARCHAR} ,</if>
        <if test="record.balance != null">balance = #{record.balance,jdbcType=DECIMAL} ,</if>
        <if test="record.biz != null">biz = #{record.biz,jdbcType=INTEGER} ,</if>
        <if test="record.nonce != null">nonce = #{record.nonce,jdbcType=INTEGER} ,</if>
        <if test="record.index != null">`index` = #{record.index,jdbcType=INTEGER} ,</if>
        <if test="record.status != null">status = #{record.status,jdbcType=TINYINT} ,</if>
        <if test="record.createDate != null">create_date = #{record.createDate,jdbcType=TIMESTAMP} ,</if>
        <if test="record.updateDate != null">update_date = #{record.updateDate,jdbcType=TIMESTAMP} ,</if>
    </sql>
    <!-- insert -->
    <insert id="insert" parameterType="java.util.Map">
        <selectKey resultType="java.lang.Integer" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into ${shardTable.prefix}_address
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into ${shardTable.prefix}_address
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
    <insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
        insert into ${shardTable.prefix}_address
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values_On_DuplicateKey"/>
            </trim>
        </foreach>
        ON DUPLICATE KEY UPDATE
        user_id = VALUES(user_id) , address = VALUES(address) , balance = VALUES(balance) , biz = VALUES(biz) , nonce =
        VALUES(nonce) , `index` = VALUES(`index`) , status = VALUES(status) , create_date = VALUES(create_date) ,
        update_date = VALUES(update_date)
    </insert>
    <!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from ${shardTable.prefix}_address where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from ${shardTable.prefix}_address where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=INTEGER}
        </foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
    <update id="updateById" parameterType="java.util.Map">
        update ${shardTable.prefix}_address
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        where id = #{record.id,jdbcType=INTEGER}
    </update>
    <update id="updateByExample" parameterType="java.util.Map">
        update ${shardTable.prefix}_address
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update ${shardTable.prefix}_address
            <set>
                <include refid="Update_Set_From_Bean"/>
            </set>
            where id=#{record.id,jdbcType=INTEGER}
        </foreach>
    </update>
    <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByExample" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <if test="example != null and example.distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
    </select>
    <select id="selectOneByExample" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1
    </select>
    <select id="selectAndLockOneByExample" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="example != null and example.orderByClause != null">
            order by ${example.orderByClause}
        </if>
        limit 1 FOR UPDATE
    </select>
    <select id="selectIn" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
            #{record.id,jdbcType=INTEGER}
        </foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="AddressMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
    <select id="getTotalBalance" resultType="java.math.BigDecimal" parameterType="java.util.Map">
        select
        SUM(balance)
        from ${shardTable.prefix}_address
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
</mapper>
